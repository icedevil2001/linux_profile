" ========== Custom key =========
"
" The mapleader has to be set before vundle starts loading all the plugins.

let mapleader = "\<Space>"
"nmap <Leader>rxm :ExtractMethod<Enter>


noremap   <buffer> K      :s,^\(\s*\)[^# \t]\@=,\1#,e<CR>:nohls<CR>zvj
noremap   <buffer> <C-K>  :s,^\(\s*\)#\s\@!,\1,e<CR>:nohls<CR>zvj

" rr to reload vimrc
map <leader>rr :source ~/.vimrc<CR>

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Toggle spell check.
map <F2> :setlocal spell!<CR>

" F3 paste mode on and off
set pastetoggle=<F3>   " set paste on and off

" F4 to show/disable white-space
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
"set list listchars=tab:▷⋅,trail:⋅,nbsp:
noremap <F4> :set list!<CR>
inoremap <F4> <C-o>:set list!<CR>
cnoremap <F4> <C-c>:set list!<CR>


" F5 Git signs Toggle
map <F5> :GitGutterToggle<CR>
" F6 Git Highlight Toggle
map <F6> :GitGutterLineHighlightsToggle<CR>

" Clear search highlights with space +space
map <Leader><Space> :let @/=''<CR>

" Copy the relative path of the current file to the clipboard
nmap <Leader>cf :silent !echo -n % \| pbcopy<Enter>

map <C-n> :NERDTreeToggle<CR>
" Strip trailing whitespace (,ss)
function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Navigate around splits with a single key combo.
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-j> <C-w><C-j>

" Cycle through splits with tab .
nnoremap <S-Tab> <C-w>w

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
nnoremap <Leader>r :%s///g<Left><Left>
nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" The same as above but instead of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press a key below to replace all instances of it in the current selection.
xnoremap <Leader>r :s///g<Left><Left>
xnoremap <Leader>rc :s///gc<Left><Left><Left>


" Automatically fix the last misspelled word and jump back to where you were.
"   Taken from this talk: https://www.youtube.com/watch?v=lwD8G1P52Sk
nnoremap <leader>sp :normal! mz[s1z=`z<CR>

filetype on
filetype plugin on
filetype indent on
syntax on

" Automatic commands
if has("autocmd")
    " Enable file type detection
    filetype on
    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif

" =========== Airline status bar config ======
" let g:airline_theme="wombat"
" let g:airline#extensions#tabline#enabled = 1

set ttimeoutlen=50
let g:airline_theme = 'powerlineish'
let g:airline#extensions#hunks#enabled=0
let g:airline#extensions#branch#enabled=1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" =============== Plugins ================
" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')


" Python + Theme (molokai)
Plug 'sentientmachine/Pretty-Vim-Python'

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'

" Directory display
"Plug 'vifm/vifm.vim'
" NerdTree display Directory
Plug 'preservim/nerdtree'
" NerdTree plugin Grep
Plug 'MarSoft/nerdtree-grep-plugin'
" Copy full path from Nerdtree use 'mb' to copy 
Plug 'mortonfox/nerdtree-clip'

" Tmux
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'

" Visuals
Plug 'altercation/vim-colors-solarized'

" work with git from inside of vim
Plug 'tpope/vim-fugitive'

" helps comment out blocks of code
Plug 'tpope/vim-commentary'
" https://github.com/tpope/vim-sensible
" Sensible default features for vim
Plug 'tpope/vim-sensible'
" Asynchronous Lint Engine
Plug 'dense-analysis/ale'

" CopyFile Paths or Name
Plug 'vim-scripts/copypath.vim'

" Fancy status bar and tab line for Vim
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Git
Plug 'airblade/vim-gitgutter'

" Auto complete text/code
Plug 'vim-scripts/AutoComplPop'

" Briefly highlight which text was yanked.
Plug 'machakann/vim-highlightedyank'

" Add spelling errors to the quickfix list (vim-ingo-library is a dependency).
Plug 'inkarkat/vim-ingo-library' | Plug 'inkarkat/vim-SpellCheck'

" csv
"Plug 'chrisbra/csv.vim'
Plug 'mechatroner/rainbow_csv'
" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" ================ Plugin Configuration =============
" https://levelup.gitconnected.com/why-and-how-i-use-vim-da322260aa6c
" ALE Configuration
let g:ale_fixers = {
            \    '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'css': ['prettier'],
            \   'javascript': ['prettier', 'eslint'],
            \   'json': ['prettier'],
            \   'less': ['prettier'],
            \   'python': ['black', 'isort'],
            \   'scss': ['prettier'],
            \   'yaml': ['prettier'],
            \}
let g:ale_linters = {
            \   'css': ['prettier'],
            \   'javascript': ['prettier', 'eslint'],
            \   'json': ['prettier'],
            \   'less': ['prettier'],
            \   'python': ['flake8'],
            \   'scss': ['prettier'],
            \   'yaml': ['prettier'],
            \}
let g:ale_fix_on_save = 1

" ================ Git gutter =================
" Git show on status bar
function! GitStatus()
    let [a,m,r] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}


let g:gitgutter_max_signs = 500  " default value (Vim < 8.1.0614, Neovim < 0.4.0)
let g:gitgutter_max_signs = -1   " default value (otherwise)

nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" vim-gitgutter used to do this by default:
highlight! link SignColumn LineNr

" or you could do this:
"highlight SignColumn guibg=whatever ctermbg=whatever

" ================ kite autocomplete ================

"let g:kite_auto_complete=1
"let g:kite_supported_languages = ['python', 'javascript', 'go']
"set completeopt+=menuone   " show the popup menu even when there is only 1 match
"set completeopt+=noinsert  " don't insert any text until user chooses a match
"set completeopt-=longest   " don't insert the longest common text

" ================ General Config ====================
set autoread                    "Reload files changed outside vim
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set ttyfast                     "fast scrolling
set bg=dark                     " Dark ground
set nowrap                      " no wrapping text
syntax enable                   " Turn on syntax highlighting
set hidden                      " Leave hidden buffers open

set binary
set noeol                        " Don’t add empty newlines at the end of files
set encoding=utf-8 nobomb       " Use UTF-8 without BOM
set clipboard=unnamed           " Use the OS clipboard by default (on versions compiled with `+clipboard`)
set t_Co=256
colorscheme molokai
set colorcolumn=80,100
highlight ColorColumn ctermbg=238  "guigb=#23272

set title                       " show filename
set scrolloff=3                 " Start scrolling three lines before the horizontal window border
set hlsearch                    " Highlight searches
set ignorecase                  " Ignore case of searches
set incsearch                   " Highlight dynamically as pattern is typed
set laststatus=2                " Always show status line

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=2
set tabstop=4
set expandtab


" ============== File specification template =============

filetype plugin indent on
" auto indent python files
au FileType py set autoindent
au FileType py set smartindent
au FileType py set textwidth=79 " PEP-8 Friendly

" syntex hightlight for Snakemake
au BufNewFile,BufRead Snakefile set syntax=snakemake
au BufNewFile,BufRead *.smk set syntax=snakemake

"csv formatting
"autocmd BufNewFile,BufRead *.csv   set filetype=csv_semicolon
" autocmd BufNewFile,BufRead *.dat   set filetype=csv_pipe
" au! BufNewFile,BufRead *.csv setf csv
"if exists("did_load_csvfiletype")
"  finish
"endif
"let did_load_csvfiletype=1
"
"augroup filetypedetect
"  au! BufRead,BufNewFile *.csv,*.dat	setfiletype csv
"augroup END

" ================ Persistent Undo ==================

" " Keep undo history across sessions, by storing in file.
" " Only works all the time.
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" ===============  NERDTree  ====================
" auto open nerdtree
" autocmd vimenter * NERDTree

" auto open nerdtreeif no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

nnoremap <Leader>f :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

"
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" ============== AutoComplPop ================
set shortmess+=c
set showmatch
set spelllang=en_us
set complete+=kspell
set completeopt=menuone,longest

" Navigate the complete menu items like CTRL+n / CTRL+p would.
inoremap <expr> <Down> pumvisible() ? "<C-n>" :"<Down>"
inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like CTRL+y would.
inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
inoremap <expr> <CR> pumvisible() ? "<C-y>" :"<CR>"

" Cancel the complete menu item like CTRL+e would.
inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"


" =============== TODO =======================
" https://github.com/nickjj/dotfiles/blob/master/.vimrc
" Add all TODO items to the quickfix list relative to where you opened Vim.
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -niIw -e TODO -e FIXME 2> /dev/null',
            \ 'grep -rniIw -e TODO -e FIXME . 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction

" ============== Bottom bar status =============
"Status-line
"set statusline=%F%m%r%h%w\ [TYPE=%Y\ %{&ff}]\ [%l/%L\ (%p%%)
"set statusline=
"set statusline+=%#IncSearch#
"set statusline+=\ %y
"set statusline+=\ %r
"set statusline+=%#CursorLineNr#
"set statusline+=\ %f
"set statusline+=%= "Right side settings
"set statusline+=%#Search#
"set statusline+=\ %l/%L
"set statusline+=\ [%c]
"set statusline+=%F%m%r%h%w